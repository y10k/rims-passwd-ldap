# -*- coding: utf-8 -*-

require 'pp'
require 'test/unit/assertions'
require 'yaml'

include Test::Unit::Assertions

DOCKER_CMD = ENV['DOCKER'] || 'docker'

IMAGE_REPOSITORY = 'toki/rims-slapd'
IMAGE_TAG = 'v2.0'

NAME = ENV['NAME'] || 'rims-slapd'
AUTH = YAML.load_file(File.join(File.dirname(__FILE__), 'build', 'auth.yml'))

def docker(*args)
  sh DOCKER_CMD, *args
end

def docker_exec_i(*cmd, input_string)
  docker_cmd = [ DOCKER_CMD, 'exec', '-i', NAME ] + cmd
  IO.popen(docker_cmd, 'w') {|stdin| stdin << input_string }
  if ($?.exitstatus != 0) then
    raise "FAILED: #{docker_cmd.join(' ')} <\n" + input_string
  end
end

def load_users
  YAML.load_file(File.join(File.dirname(__FILE__), 'users.yml'))
end

def ldap_anon
  require 'net/ldap'            # on-demand load
  Net::LDAP.open(host: 'localhost', port: AUTH['port']) {|ldap|
    yield(ldap)
  }
end

def ldap_open(username='cn=admin,dc=nodomain', password=AUTH['pass'], method=:simple)
  ldap_anon{|ldap|
    unless (ldap.bind(method: method, username: username, password: password)) then
      p ldap.get_operation_result
      raise 'failed to bind.'
    end
    yield(ldap)
  }
end

def ldap_error(ldap)
  pp ldap.get_operation_result
  raise 'ldap fail.'
end


desc 'total setup'
task :setup => [ :'docker:setup', :wait, :'ldap:setup' ]

desc 'total reset'
task :reset => [ :'docker:reset', :wait, :'ldap:setup' ]

task :wait do
  s = 10
  puts "...wait #{s}s..."
  sleep(s)
end

namespace :docker do
  desc 'all setup'
  task :setup => [ :build, :run ]

  desc 'all destroy'
  task :destroy => [ :stop, :rm, :rmi ]

  desc 'reset running container'
  task :reset => [ :stop, :rm, :run ]

  desc 'build image'
  task :build do
    docker 'build', '-t', "#{IMAGE_REPOSITORY}:#{IMAGE_TAG}", 'build'
  end

  desc 'remove image'
  task :rmi do
    docker 'rmi', "#{IMAGE_REPOSITORY}:#{IMAGE_TAG}"
  end

  desc 'run new container'
  task :run do
    docker 'run', "--name=#{NAME}", '-itd', '-p', "#{AUTH['port']}:389", "#{IMAGE_REPOSITORY}:#{IMAGE_TAG}"
  end

  desc 'start container'
  task :start do
    docker 'start', NAME
  end

  desc 'stop container'
  task :stop do
    docker 'stop', NAME
  end

  desc 'remove container'
  task :rm do
    docker 'rm', NAME
  end

  desc 'show slapd configuration'
  task :conf do
    docker 'exec', NAME, 'slapcat', '-b', 'cn=config'
  end

  desc 'tail slapd logging'
  task :tail do
    docker 'exec',  NAME, 'tail', '-100f', '/var/log/syslog'
  end
end

namespace :ldap do
  desc 'setup example'
  task :setup => [ :'conf:index', :build, :'conf:acl' ]

  desc 'dump example dit'
  task :dump do
    ldap_open{|ldap|
      puts '* all'
      pp ldap.search(base: 'dc=nodomain')

      phys_filter = Net::LDAP::Filter.eq('memberOf', 'cn=physics,ou=group,o=science,dc=nodomain')
      math_filter = Net::LDAP::Filter.eq('memberOf', 'cn=mathematics,ou=group,o=science,dc=nodomain')

      for f in [ phys_filter, math_filter ]
        puts "* filter: #{f}"
        pp ldap.search(base: 'o=science,dc=nodomain', attributes: %w[ dn ], filter: f)
      end
    }
  end

  desc 'anonymous'
  task :anonymous do
    ldap_anon{|ldap|
      puts '* all'
      pp ldap.search(base: 'dc=nodomain')
      pp ldap.search(base: 'o=science,dc=nodomain')
      pp ldap.search(base: 'ou=user,o=science,dc=nodomain')

      phys_filter = Net::LDAP::Filter.eq('memberOf', 'cn=physics,ou=group,o=science,dc=nodomain')
      math_filter = Net::LDAP::Filter.eq('memberOf', 'cn=mathematics,ou=group,o=science,dc=nodomain')

      for f in [ phys_filter, math_filter ]
        puts "* filter: #{f}"
        pp ldap.search(base: 'o=science,dc=nodomain', attributes: %w[ dn ], filter: f)
      end
    }
  end

  desc 'search dit'
  task :search do
    users = load_users
    search = users['support'].find{|role| role['cn'] = 'search' }
    search_dn = "cn=#{search['cn']},ou=support,o=science,dc=nodomain"
    ldap_open(search_dn, search['userPassword']) {|ldap|
      puts '* all'
      pp ldap.search(base: 'dc=nodomain')

      puts '* self'
      pp ldap.search(base: search_dn)

      phys_filter = Net::LDAP::Filter.eq('memberOf', 'cn=physics,ou=group,o=science,dc=nodomain')
      math_filter = Net::LDAP::Filter.eq('memberOf', 'cn=mathematics,ou=group,o=science,dc=nodomain')

      for f in [ phys_filter, math_filter ]
        puts "* filter: #{f}"
        pp ldap.search(base: 'ou=user,o=science,dc=nodomain', filter: f)
      end
    }
  end

  desc 'build exmaple dit'
  task :build do
    ldap_open{|ldap|
      ldap.add(dn: 'o=science,dc=nodomain',
               attributes: {
                 objectclass: 'organization'
               }) or ldap_error(ldap)
      ldap.add(dn: 'ou=support,o=science,dc=nodomain',
               attributes: {
                 objectclass: 'organizationalUnit'
               }) or ldap_error(ldap)
      ldap.add(dn: 'ou=user,o=science,dc=nodomain',
               attributes: {
                 objectclass: 'organizationalUnit'
               }) or ldap_error(ldap)
      ldap.add(dn: 'ou=group,o=science,dc=nodomain',
               attributes: {
                 objectclass: 'organizationalUnit'
               }) or ldap_error(ldap)

      users = load_users

      for role in users['support']
        attrs = {}
        for name, value in role
          case (name)
          when 'userPassword'
            attrs[:userPassword] = Net::LDAP::Password.generate(:ssha, value)
          else
            attrs[name.to_sym] = value
          end
        end
        attrs[:objectClass] = %w[ organizationalRole simpleSecurityObject ]
        ldap.add(dn: "cn=#{role['cn']},ou=support,o=science,dc=nodomain",
                 attributes: attrs) or ldap_error(ldap)
      end

      for user in users['user']
        attrs = {}
        for name, value in user
          case (name)
          when 'userPassword'
            attrs[:userPassword] = Net::LDAP::Password.generate(:ssha, value)
          when 'group'
            # skip
          else
            attrs[name.to_sym] = value
          end
        end
        attrs[:objectclass] = 'inetOrgPerson'
        ldap.add(dn: "uid=#{user['uid']},ou=user,o=science,dc=nodomain",
                 attributes: attrs) or ldap_error(ldap)
      end

      groups = {}
      for user in users['user']
        groups[user['group']] = [] unless (groups.key? user['group'])
        groups[user['group']] << user['uid']
      end

      for name, members in groups
        ldap.add(dn: "cn=#{name},ou=group,o=science,dc=nodomain",
                 attributes: {
                   cn: name,
                   objectclass: 'groupOfNames',
                   member: members.map{|uid| "uid=#{uid},ou=user,o=science,dc=nodomain" }
                 }) or ldap_error(ldap)
      end
    }
  end

  desc 'some tests'
  task :test => [ :test_user_auth, :test_search_acl ]

  task :test_user_auth do
    ldap_anon{|ldap|
      users = load_users
      for role in users['support']
        ldap.bind(method: :simple,
                  username: "cn=#{role['cn']},ou=support,o=science,dc=nodomain",
                  password: role['userPassword']) or ldap_error(ldap)
      end
      for user in users['user']
        ldap.bind(method: :simple,
                  username: "uid=#{user['uid']},ou=user,o=science,dc=nodomain",
                  password: user['userPassword']) or ldap_error(ldap)
      end
    }
  end

  task :test_search_acl do
    users = load_users
    search = users['support'].find{|role| role['cn'] = 'search' }
    search_dn = "cn=#{search['cn']},ou=support,o=science,dc=nodomain"
    ldap_open(search_dn, search['userPassword']) {|ldap|
      assert_nil(ldap.search(base: 'dc=nodomain'))
      assert_nil(ldap.search(base: 'o=science,dc=nodomain'))
      assert_nil(ldap.search(base: 'ou=support,o=science,dc=nodomain'))
      assert_nil(ldap.search(base: search_dn))

      assert(entry_list = ldap.search(base: 'ou=user,o=science,dc=nodomain',
                                      scope: Net::LDAP::SearchScope_BaseObject))
      assert(ou = entry_list.shift)
      assert_equal(%w[ organizationalUnit ], ou[:objectClass])
      assert_equal(%w[ user ], ou[:ou])
      assert_equal([], ou[:userPassword])
      assert_nil(entry_list.shift)

      assert(entry_list = ldap.search(base: 'ou=user,o=science,dc=nodomain',
                                      scope: Net::LDAP::SearchScope_WholeSubtree,
                                      filter: Net::LDAP::Filter.eq('objectClass', 'inetOrgPerson')))
      assert_equal(users['user'].length, entry_list.length)
      for person in entry_list
        assert_equal(%w[ inetOrgPerson ], person[:objectClass])
        for uid in person[:uid]
          assert(users['user'].find{|user| user['uid'] == uid })
        end
        assert_equal([], person[:userPassword])
      end
    }
  end
end

namespace :conf do
  desc 'setup slapd ACL'
  task :acl do
    docker_exec_i 'ldapmodify', '-Y', 'EXTERNAL', '-H', 'ldapi:///', <<EOF
dn: olcDatabase={1}hdb,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}
  to dn.exact="cn=search,ou=support,o=science,dc=nodomain" attrs=userPassword,shadowLastChange
    by anonymous auth
    by dn="cn=admin,dc=nodomain" write
    by * none
olcAccess: {1}
  to attrs=userPassword,shadowLastChange
    by self write
    by anonymous auth
    by dn="cn=admin,dc=nodomain" write
    by * none
olcAccess: {2}
  to dn.subtree="ou=user,o=science,dc=nodomain" filter=(|(objectClass=organizationalUnit)(objectClass=inetOrgPerson))
    by dn.exact="cn=search,ou=support,o=science,dc=nodomain" read
olcAccess: {3}
  to *
    by dn.exact="cn=search,ou=support,o=science,dc=nodomain" none
olcAccess: {4}
  to dn.base=""
    by * read
olcAccess: {5}
  to *
    by self write
    by dn="cn=admin,dc=nodomain" write
    by * read
EOF
  end

  desc 'enable slapd verbose logging'
  task :logging_on do
    docker_exec_i 'ldapmodify', '-Y', 'EXTERNAL', '-H', 'ldapi:///', <<EOF
dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: 8 32 64 128 256
EOF
  end

  desc 'disable slapd verbose logging'
  task :logging_off do
    docker_exec_i 'ldapmodify', '-Y', 'EXTERNAL', '-H', 'ldapi:///', <<EOF
dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: 64 256
EOF
  end

  desc 'add index'
  task :index do
    docker_exec_i 'ldapmodify', '-Y', 'EXTERNAL', '-H', 'ldapi:///', <<EOF
dn: olcDatabase={1}hdb,cn=config
changetype: modify
add: olcDbIndex
olcDbIndex: uid eq
olcDbIndex: memberOf eq
EOF
  end
end

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
